name: Pipeline

on:
  push:
  pull_request:
    branches:
      - "*"

env:
  APIENV: "LOCAL"
  # With `LOCAL` set, a local sqlite db will be used
  AWS_REGION: "eu-west-2"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  ###############################################################################
  # Install dependencies & build packages
  ###############################################################################

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-cache

  ###############################################################################
  # Check environment for known vulnerabilities (pip audit & bandit)
  ###############################################################################

  vulnerabilities:
    name: Vulnerabilities
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-cache

      # Scan dependencies with `pip-audit`
      - uses: pypa/gh-action-pip-audit@v1.0.8
        with:
          inputs: requirements-prod.txt requirements-dev.txt

      # Scan project with `Bandit`
      - name: Run Bandit
        run: |
          bandit -c pyproject.toml -r .

  ###############################################################################
  # Code quality checks
  ###############################################################################

  quality-checks:
    name: Linting
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-cache

      - name: Run ruff & black
        run: |
          source .github/workflows/formatting.sh

  ###############################################################################
  # Architectural constraints checks
  ###############################################################################

  architecture-checks:
    name: Architecture checks
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-cache

      - name: Run import-linter
        run: |
          lint-imports

  ###############################################################################
  # Unit tests
  ###############################################################################

  unit-tests:
    name: Unit tests
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-cache

      - name: Run unit tests
        run: |
          python -m pytest tests/unit/

  ###############################################################################
  # Integration tests
  ###############################################################################

  integration-tests:
    name: Integration tests
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-cache

      - name: Run Integration tests
        run: |
          python -m pytest tests/integration/

  ###############################################################################
  # System tests
  ###############################################################################

  system-tests:
    name: System tests
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-cache

      - name: Run System tests
        run: |
          python -m pytest tests/system/

  ###############################################################################
  # Test coverage
  ###############################################################################

  test-coverage:
    name: Test coverage
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-cache

      - name: Evaluate test coverage
        run: |
          pytest --cov

  ###############################################################################
  # Deploy
  ###############################################################################

  publish-main-image:
    name: Publish main image
    needs: [
      quality-checks,
      unit-tests,
      integration-tests,
      system-tests,
      test-coverage,
      vulnerabilities,
      architecture-checks
    ]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    # Only deploy if the changes are being pushed to the `main` branch

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::518944279943:role/devops_github_actions_wp_api
          role-session-name: testsession
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: wp-api
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        shell: bash


  publish-ingestion-image:
    name: Publish ingestion image
    needs: [
      quality-checks,
      unit-tests,
      integration-tests,
      system-tests,
      test-coverage,
      vulnerabilities,
      architecture-checks
    ]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    # Only deploy if the changes are being pushed to the `main` branch

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::518944279943:role/devops_github_actions_wp_api
          role-session-name: testsession
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: wp-ingestion
          IMAGE_TAG: latest
        run: |
          docker build --platform linux/amd64 -f Dockerfile-ingestion -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        shell: bash