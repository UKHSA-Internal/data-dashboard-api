name: Pipeline

on:
  push:
  pull_request:
    branches:
      - "*"

env:
  APIENV: "DEV"
  # Setting to "PROD" in the CI/CD job would connect to the remote prod db, hence using a local sqlite db with "DEV"
  AWS_REGION: "eu-west-2"
  POSTGRES_HOST: "wp-dashboard-dev-rds.c0obwmng7sq9.eu-west-2.rds.amazonaws.com"
  POSTGRES_USER: "wp_user"
  POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
  POSTGRES_DB: "winterpressures"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  ###############################################################################
  # Install dependencies & build packages
  ###############################################################################

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: ./.github/actions/install-cache

  ###############################################################################
  # Check environment for known vulnerabilities (pip audit & bandit)
  ###############################################################################

  vulnerabilities:
    name: Vulnerabilities
    needs: [build]    
    runs-on: ubuntu-latest  
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: ./.github/actions/install-cache    
      - uses: pypa/gh-action-pip-audit@v1.0.6
        with:
          inputs: requirements.txt

      - name: Run Bandit
        run: |
          bandit -r .

  ###############################################################################
  # Code quality checks
  ###############################################################################

  quality-checks:
    name: Linting
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: ./.github/actions/install-cache

      - name: Run isort & black
        run: |
          source .github/workflows/formatting.sh

  ###############################################################################
  # Architectural constraints checks
  ###############################################################################

  architecture-checks:
    name: Architectural constraints checks
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: ./.github/actions/install-cache

      - name: Run import-linter
        run: |
          lint-imports

  ###############################################################################
  # Unit tests
  ###############################################################################

  unit-tests:
    name: Unit tests
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: ./.github/actions/install-cache

      - name: Run unit tests
        run: |
          python -m pytest tests/unit/

  ###############################################################################
  # Integration tests
  ###############################################################################

  integration-tests:
    name: Integration tests
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: ./.github/actions/install-cache

      - name: Run Integration tests
        run: |
          python -m pytest tests/integration/

  ###############################################################################
  # Deploy
  ###############################################################################

  deploy:
    name: ECR Image Push
    needs: [quality-checks, unit-tests, integration-tests, vulnerabilities, architecture-checks]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    # Only deploy if the changes are being pushed to the `main` branch

    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          role-to-assume: arn:aws:iam::518944279943:role/devops_github_actions_wp_api
          role-session-name: testsession
          aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: wp-api
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        aws ecs update-service --cluster wp-api-cluster --service wp-api-service --force-new-deployment --region eu-west-2
