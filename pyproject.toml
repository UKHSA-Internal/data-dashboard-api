########################################################################################################################
# Ruff configuration
########################################################################################################################
[tool.ruff]
lint.select = [
    "AIR",      # airflow
    "ERA",      # eradicate
    "ASYNC",    # flake8-async
    "S",        # flake8-bandit
    "BLE",      # flake8-blind-except
    "FBT",      # flake8-boolean-trap
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "C4",       # flake8-comprehensions
    "T10",      # flake8-debugger
    "EXE",      # flake8-executable
    "EM",       # flake8-errmsg
    "FIX",      # flake8-fixme
    "FA",       # flake8-future-annotations
    "INT",      # flake8-gettext
    "ISC",      # flake8-implicit-str-concat
    "ICN",      # flake8-import-conventions
    "G",        # flake8-logging-format
    "LOG",      # flake8-logging
    "INP",      # flake8-no-pep420
    "PIE",      # flake8-pie
    "T20",      # flake8-print
    "PYI",      # flake8-pyi
    "PT",       # flake8-pytest-style
    "Q",        # flake8-quotes
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "SLF",      # flake8-self
    "SIM",      # flake8-simplify
    "SLOT",     # flake8-slots
    "TID",      # flake8-tidy-imports
    "TD",       # flake8-todos
    "YTT",      # flake8-2020
    "FLY",      # flynt
    "I",        # isort
    "C90",      # mccabe
    "PERF",     # Perflint
    "F",        # Pyflakes
    "PLC",      # Pylint - convention
    "PLE",      # Pylint - error
    "PLR",      # Pylint - refactor
    "PLW",      # Pylint - warning
    "N",        # pep8-naming
    "E",        # pycodestyle - error
    "W",        # pycodestyle - warning
    "PGH",      # pygrep-hooks
    "UP",       # pyupgrade
    "FURB",     # refurb
    "TRY",      # tryceratops
]

# Ignore rules
lint.ignore = [
    "F821",     # Undefined class names - currently used to bypass circular imports in type hints
    "ISC001",   # Implicitly concatenated strings on a single line - conflicts with the ruff formatter
    "PLR0913",  # Too many arguments - temporarily ignored whilst dev work underway to pass config objects
                    # into components which have numerous dependencies during initialization
    "PLR0911",  # Too many return statements
    "E501",     # Ignore line-length in template for populating CMS menu snippet
]

# Allow fix for all enabled rules (when `--fix`) is provided.
lint.fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
lint.unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    ".ruff_cache",
    "venv",
    ".venv",
    "__pypackages__",
    "build",
    "dist",
    "*/migrations/*",
    "*/__init__.py",
    "manage.py",
    "tests/*",
]

# Allow line lengths of up to 120 characters
line-length = 120

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint.per-file-ignores]
"**/{tests}/*"                                                = [
                                                                 "E501",           # Ignore line length in test files
                                                                 "S101",           # Ignore use of `assert` statement in tests
                                                                 "SLF001"          # Ignore access of private methods/attributes in tests
                                                                ]
"metrics/api/views/*"                                         = ["E501"]           # Ignore line length in API views.
                                                                                        # This infringement is due to
                                                                                        # swagger-facing docstrings/documentation
"metrics/api/views/charts.py"                                 = ["SIM115"]         # Ignore context handler for opening file
"**/help_texts.py"                                            = ["W291"]           # Ignore trailing whitespace for help texts
"**/build_cms_site.py"                                        = ["W605"]           # Ignore escape sequences used in regex calls
"ingestion/file_ingestion.py"                                 = ["BLE001"]         # Ignore blind exception catch for file ingestion function
"ingestion/data_transfer_models/validation/geography_code.py" = ["C901"]           # Ignore complexity assessment - due to switch case
"public_api/views/root_view.py"                               = ["A002"]           # Ignore built-in `format` used in arg to extended
"public_api/version_02/views/root_view.py"                    = ["A002"]           # Ignore built-in `format` used in arg to extended
                                                                                        # rest framework API view method
"caching/public_api/crawler.py"                               = ["PERF401"]        # Ignore list comprehension which would reduce readibility
"caching/common/geographies_crawler.py"                       = ["PLW1641"]        # Ignore requirement of `__hash__` implementation
"metrics/domain/weather_health_alerts/text_lookups/*"         = ["W291"]           # Ignore trailing whitespace for weather alert text lookups
"config.py"                                                   = ["PLW1508"]        # Ignore enforcing strings for environment variables

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

########################################################################################################################
# Pytest configuration
########################################################################################################################
[tool.pytest.ini_options]
# This is needed to point pytest at the settings.py file for the django app
DJANGO_SETTINGS_MODULE = "metrics.api.settings"
addopts = "--random-order"

########################################################################################################################
# Test coverage configuration
########################################################################################################################
[tool.coverage.run]
source = ["caching", "cms", "feedback", "ingestion", "metrics", "public_api"]

[tool.coverage.report]
omit = [
    "tests/*",                          # Omit test files themselves from the report
    "cms/search/*",                     # Boilerplate wagtail `search` app
    "metrics/api/wsgi.py",              # Boilerplate Django server entrypoint
    "metrics/api/asgi.py",              # Boilerplate Django server entrypoint
    "metrics/api/settings/*",           # Configuration paackage
    "config.py",                        # Configuration file
    "manage.py",                        # Application server entrypoint
    "*/migrations/*"                    # Database migrations
]
skip_covered = true                     # Only list files which do not have 100% test coverage in the report
show_missing = true                     # Report lines which were not hit
fail_under = 100.00                     # Test coverage report will fail for total coverage under this threshold value
exclude_lines = ["__str__"]

########################################################################################################################
# Bandit configuration
########################################################################################################################
[tool.bandit]
exclude_dirs = ["tests", ".venv"]

########################################################################################################################
# Import linter configuration
########################################################################################################################
[tool.importlinter]
# This is needed to point pytest at the settings.py file for the django app
root_packages = [
    "cms",
    "metrics",
    "public_api",
    "feedback",
    "ingestion",
    "tests",
]
include_external_packages = true

[[tool.importlinter.contracts]]
name = "Metrics and CMS do not depend on each other, except via the designated interface and connection of URLs."
type = "independence"
modules = [
    "metrics",
    "cms",
]
ignore_imports = [
    "cms.metrics_interface.interface -> metrics.data.models.core_models",
    "cms.metrics_interface.interface -> metrics.domain.common.utils",
    "cms.metrics_interface.interface -> metrics.domain.charts.line_multi_coloured.properties",
    "cms.metrics_interface.interface -> metrics.domain.charts.colour_scheme",
    "cms.metrics_documentation.data_migration.operations -> metrics.api.settings",
    "metrics.api.urls_construction -> cms.dashboard.viewsets",
    "metrics.api.urls_construction -> cms.dashboard.views",
    "metrics.api.urls_construction -> cms.snippets.views",
    "metrics.api.urls_construction -> feedback.api.urls",
]

[[tool.importlinter.contracts]]
name = "Metrics package enforces clear architectural layers within itself."
type = "layers"
layers = [
    "metrics.api",
    "metrics.domain",
    "metrics.data",
]

[[tool.importlinter.contracts]]
name = "Metrics domain siblings do not depend on each other."
type = "layers"
layers = [
    """
    metrics.domain.bulk_downloads |
    metrics.domain.charts |
    metrics.domain.headlines |
    metrics.domain.tables |
    metrics.domain.trends |
    metrics.domain.weather_health_alerts
    """,
]

[[tool.importlinter.contracts]]
name = "Metrics API endpoints do not depend on each other."
type = "layers"
layers = [
    """
    metrics.api.views.charts |
    metrics.api.views.downloads |
    metrics.api.views.geographies |
    metrics.api.views.headlines |
    metrics.api.views.health |
    metrics.api.views.tables |
    metrics.api.views.trends
    """,
]

#----------------------------------------------- Public API contracts -------------------------------------------------#
[[tool.importlinter.contracts]]
name = "Public API only depends on the APITimeSeries model & corresponding components via the designated interface."
type = "forbidden"
source_modules = [
    "public_api",
]
forbidden_modules = [
    "metrics.api",
    "metrics.data",
    "metrics.domain",
    "metrics.interfaces",
    "cms",
    "ingestion",
    "feedback",
]
ignore_imports = [
    "public_api.metrics_interface.interface -> metrics.data.models.api_models",
    "public_api.metrics_interface.interface -> metrics.api.settings.auth",
]

[[tool.importlinter.contracts]]
name = "The Public API module is only imported for the wiring of URLs."
type = "forbidden"
source_modules = [
    "metrics.api",
    "metrics.data",
    "metrics.domain",
    "metrics.interfaces",
    "cms",
    "ingestion",
    "feedback",
]
forbidden_modules = [
    "metrics.public_api",
]
ignore_imports = [
    "metrics.api.urls_construction -> public_api",
]
#----------------------------------------------- Ingestion contracts --------------------------------------------------#
[[tool.importlinter.contracts]]
name = "The Ingestion module only depends on the core models & associated components via the designated interface"
type = "forbidden"
source_modules = [
    "ingestion",
]
forbidden_modules = [
    "metrics.api",
    "metrics.data",
    "metrics.domain",
    "metrics.interfaces",
    "cms",
    "feedback",
    "public_api",
]
ignore_imports = [
    "ingestion.metrics_interface.interface -> metrics.data.models.core_models",
    "ingestion.metrics_interface.interface -> metrics.data.models.api_models",
    "ingestion.metrics_interface.interface -> metrics.data.enums",
    "ingestion.metrics_interface.interface -> metrics.domain.common.utils",
    "ingestion.operations.truncated_dataset -> metrics.api.settings",
]
#------------------------------------------ Metrics Domain library contracts ------------------------------------------#
[[tool.importlinter.contracts]]
name = "Metrics charts library does not depend on the rest of the codebase"
type = "forbidden"
source_modules = [
    "metrics.domain.charts",
]
forbidden_modules = [
    "metrics.api",
    "metrics.data",
    "metrics.interfaces",
    "cms",
    "ingestion",
    "feedback",
    "public_api",
]

[[tool.importlinter.contracts]]
name = "Metrics trends library does not depend on the rest of the codebase"
type = "forbidden"
source_modules = [
    "metrics.domain.trends",
]
forbidden_modules = [
    "metrics.api",
    "metrics.data",
    "metrics.interfaces",
    "cms",
    "ingestion",
    "feedback",
    "public_api",
]
#------------------------------------------- Feedback module contracts ------------------------------------------------#
[[tool.importlinter.contracts]]
name = "Feedback module does not depend on the rest of the codebase"
type = "forbidden"
source_modules = [
    "feedback",
]
forbidden_modules = [
    "cms",
    "metrics",
    "public_api",
    "ingestion",
]
ignore_imports = [
    "feedback.cms_interface.interface -> cms.forms.models",
]

[[tool.importlinter.contracts]]
name = "The rest of the codebase does not depend on the feedback module except for the connection of URLs"
type = "forbidden"
source_modules = [
    "cms",
    "metrics",
    "public_api",
    "ingestion",
]
forbidden_modules = [
    "feedback",
]
ignore_imports = [
    "metrics.api.urls_construction -> feedback.api.urls",
]
#------------------------------------------ Source/Test code contracts ------------------------------------------------#
[[tool.importlinter.contracts]]
name = "Source code does not depend on test code"
type = "forbidden"
source_modules = [
    "cms",
    "metrics",
    "public_api",
    "ingestion",
    "feedback",
]
forbidden_modules = [
    "tests",
]
